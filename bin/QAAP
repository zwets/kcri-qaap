#!/bin/sh
#
# QAAP - run the QAAP in the kcri-qaap container.
#
#   This is a shorthand for ./qaap-container-run QAAP ..., but with the
#   added convenience of working around the constraint that input files
#   must be inside the container's WORKDIR.

# Resolving input files outside the container's workdir:
#
#   We resolve all paths relative to PWD.  If QAAP_WORK_DIR is left at its
#   default of PWD, then all such relative paths are immediately portable
#   between us and the container, because QAAP_WORK_DIR is the initial PWD
#   in the container (and mounted at /workdir).
#
#   If QAAP_WORK_DIR points elsewhere, then we must translate our relative
#   paths (seen relative to PWD), to paths relative to QAAP_WORK_DIR (the
#   PWD of the container).
#
#   In all cases, a path that does not resolve to within QAAP_WORK_DIR must
#   be passed to the container as /host/absolute-path, and can then only
#   be an input, because /host is the read-only mounted root of the host.
#
#   If user passes -o/--out-dir, and OUT_DIR (as seen from PWD) resolves
#   to a directory below QAAP_WORK_DIR, then we translate it like above.
#   If it does not, then:
#   - if the user has NOT set QAAP_WORK_DIR, then we set it to OUT_DIR
#     (and translate everything else relative to it), so the container
#     sees it as its PWD and can write to it.
#   - if the user did set QAAP_WORK_DIR, we error out because things would
#     just become too confusing for everyone.
#
#   For input files, we just use the rules described above: translate to
#   path relative to QAAP_WORK_DIR, and if it is absolute, prefix /host.

# Parsing the QAAP command line
#
#   Minor issue left is that we are going to parse the QAAP command line but
#   want to remain oblivious of its flags and options.  We are only going
#   to mangle OUT_DIR and FILES.
#   We solve it with a hack here: we assume all options except a known list
#   of no-arg flags take an argument.  This will only break once a new flag
#   is added to the QAAP but not taken into account below.

CMD_LINE='QAAP'

# Exit with message to stderr
err_exit() { echo "$(basename "$0"): $*"; exit 1; }

# Append escaped arg to CMD_LINE, could also use bash's builtin:
#append_arg() { printf -v ARG '%q' "$1"; CMD_LINE="$CMD_LINE $ARG"; }
append_arg() { CMD_LINE="$CMD_LINE '$1'"; }

# Parse and store all arguments until we hit the FILES, but intercept the
# reference, out-dir, sc-d, cl-d parameters for possible adjustment.

unset OUT_DIR REF_FILE
while [ $# -ge 1 ]; do
    case "$1" in
    --ref*=*)      REF_FILE="${1##--ref*=}"; shift ;;
    -r|--ref*)     REF_FILE="$2"; shift 2 ;;
    --out-dir=*)   OUT_DIR="${1##--out-dir=}"; shift ;;
    -o|--out-dir)  OUT_DIR="$2"; shift 2 ;;
    --sc-d=*)      SC_D="${1##--sc-d=}"; shift ;;
    --sc-d)        SC_D="$2"; shift 2 ;;
    --cl-d=*)      CL_D="${1##--sc-d=}"; shift ;;
    --cl-d)        CL_D="$2"; shift 2 ;;
    --*=*|-h|--help|-v|--verbose|-m|--meta*|-a|--ampl*|-l|-s|--list-*)  # The currently known no-arg flags
        append_arg "$1"
        shift ;;
    -*)                                  # Assume all the rest come with arg
        append_arg "$1"                  # and therefore we pop off two args
        append_arg "$2"
        shift 2 ;;
    *)                                   # No dash, we've hit the input files
        break ;;
    esac
done

# First handle OUT_DIR if it was set
if [ -n "$OUT_DIR" ]; then

    # Translate it from relative to PWD to relative to QAAP_WORK_DIR
    REL_OUT="$(realpath --relative-base="${QAAP_WORK_DIR:-$PWD}" "$OUT_DIR" 2>/dev/null)" ||
        err_exit "cannot create --out-dir: $OUT_DIR"

    # If an absolute path came out, then it is not inside QAAP_WORK_DIR
    if [ -z "${REL_OUT##/*}" ]; then

        # If QAAP_WORK_DIR is set as well, we give up, too confusing
        if [ -n "$QAAP_WORK_DIR" ]; then
            err_exit "output directory must be inside of QAAP_WORK_DIR ($QAAP_WORK_DIR): $OUT_DIR"

        # Else we use QAAP_WORK_DIR directly as OUT_DIR (and no need to pass -o to QAAP)
        else
            mkdir -p "$OUT_DIR" || err_exit "failed to create output directory: $OUT_DIR"
            QAAP_WORK_DIR="$(realpath -e "$OUT_DIR")"
            unset OUT_DIR
        fi

    # Else OUT_DIR is relative within the QAAP_WORK_DIR and life is simple
    else
        append_arg "-o"
        append_arg "$REL_OUT"
    fi
fi

# Handle the REF_FILE option

if [ -n "$REF_FILE" ]; then

    # Set F to absolute path unless beneath $PWD
    F="$(realpath -e --relative-base="${QAAP_WORK_DIR:-$PWD}" "$REF_FILE" 2>/dev/null)" ||
        err_exit "no such file: $REF_FILE"

    # Prefix it with /host unless it is a relative path
    [ -n "${F##/*}" ] || F="/host$F"

    # Append to the command line
    append_arg "-r"
    append_arg "$F"
fi

# Function to process a list of file paths, prepending all with /host if needed

abs_list() {
    local P F C=""

    echo "$1" | tr ',' '\n' | sed -Ee 's/^ *//;s/ *$//;s@^~@'$HOME'@' | while read P; do

        F="$(realpath --relative-base="${QAAP_WORK_DIR:-$PWD}" "$P" 2>/dev/null)" ||
            err_exit "cannot make path relative: $P"
        [ -n "${F##/*}" ] || F="/host$F"

        printf '%s%s' "$C" "$F"
        C=','
    done
}

# Handle the SC_D comma-separated list

if [ -n "$SC_D" ]; then
    append_arg "--sc-d"
    append_arg "$(abs_list "$SC_D")"
fi

# Handle the CL_D comma-separated list

if [ -n "$CL_D" ]; then
    append_arg "--cl-d"
    append_arg "$(abs_list "$CL_D")"
fi

# Now handle the input FILES

while [ $# -ge 1 ]; do

    # Set F to absolute path unless beneath $PWD
    F="$(realpath -e --relative-base="${QAAP_WORK_DIR:-$PWD}" "$1" 2>/dev/null)" ||
        err_exit "no such file: $1"

    # Unless it is a relative path, prefix it with /host
    [ -n "${F##/*}" ] || F="/host$F"

    # Append to the command line
    append_arg "$F"
    shift

done

# Execute the collected command line, note we use eval to dequote the args
eval exec "$(dirname "$(realpath -e "$0")")/qaap-container-run" $CMD_LINE
